package com.ov3rk1ll.pokedroiddex;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.ov3rk1ll.pokedroiddex.db.DataSource;

public class DamageCalc {
	public static float NONE = 0f;
	public static float LOW = 0.5f;
	public static float NORMAL = 1f;
	public static float STRONG = 2f;
		
	public static float[][][] damageTable = {
		{	// Gen I
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NONE,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{STRONG,	NORMAL,	LOW,	LOW,	NORMAL,	STRONG,	LOW,	NONE,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL},	
			{NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	STRONG,	LOW,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NONE,	STRONG,	NORMAL,	STRONG,	LOW,	NORMAL,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL},	
			{NORMAL,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL},	
			{NONE,		NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NONE,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	STRONG,	LOW},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	STRONG,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW},	
			{NORMAL,	NORMAL,	LOW,	LOW,	STRONG,	STRONG,	LOW,	NORMAL,	LOW,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW},	
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	NONE,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	LOW},	
			{NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	LOW,	STRONG},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG}
		},{	// Gen II
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NONE,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{STRONG,	NORMAL,	LOW,	LOW,	NORMAL,	STRONG,	LOW,	NONE,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	STRONG},	
			{NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	LOW,	NONE,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NONE,	STRONG,	NORMAL,	STRONG,	LOW,	NORMAL,	STRONG,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL},	
			{NORMAL,	LOW,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	STRONG},	
			{NONE,		NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	STRONG,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	STRONG,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	LOW,	LOW,	STRONG,	STRONG,	LOW,	NORMAL,	LOW,	LOW,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	NONE,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NONE},	
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL},	
			{NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW}
		},{	// Gen III
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NONE,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{STRONG,	NORMAL,	LOW,	LOW,	NORMAL,	STRONG,	LOW,	NONE,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	STRONG},	
			{NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	LOW,	NONE,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NONE,	STRONG,	NORMAL,	STRONG,	LOW,	NORMAL,	STRONG,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL},	
			{NORMAL,	LOW,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	STRONG},	
			{NONE,		NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	STRONG,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	STRONG,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	LOW,	LOW,	STRONG,	STRONG,	LOW,	NORMAL,	LOW,	LOW,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	NONE,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NONE},	
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL},	
			{NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW}
		},{	// Gen IV
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NONE,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{STRONG,	NORMAL,	LOW,	LOW,	NORMAL,	STRONG,	LOW,	NONE,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	STRONG},	
			{NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	LOW,	NONE,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NONE,	STRONG,	NORMAL,	STRONG,	LOW,	NORMAL,	STRONG,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL},	
			{NORMAL,	LOW,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	STRONG},	
			{NONE,		NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	STRONG,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	STRONG,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	LOW,	LOW,	STRONG,	STRONG,	LOW,	NORMAL,	LOW,	LOW,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	NONE,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NONE},	
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL},	
			{NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW}
		},{	// Gen V
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NONE,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{STRONG,	NORMAL,	LOW,	LOW,	NORMAL,	STRONG,	LOW,	NONE,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	STRONG},	
			{NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	LOW,	NONE,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NONE,	STRONG,	NORMAL,	STRONG,	LOW,	NORMAL,	STRONG,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL},	
			{NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL},	
			{NORMAL,	LOW,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	STRONG},	
			{NONE,		NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	STRONG,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	STRONG,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	LOW,	LOW,	STRONG,	STRONG,	LOW,	NORMAL,	LOW,	LOW,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	NONE,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	LOW,	NORMAL},	
			{NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NONE},	
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL},	
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL},	
			{NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW}
		},{	// Gen VI
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NONE,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},
			{STRONG,	NORMAL,	LOW,	LOW,	NORMAL,	STRONG,	LOW,	NONE,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	STRONG,	LOW},
			{NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},
			{NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	LOW,	NONE,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG},
			{NORMAL,	NORMAL,	NONE,	STRONG,	NORMAL,	STRONG,	LOW,	NORMAL,	STRONG,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL},
			{NORMAL,	LOW,	STRONG,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL},
			{NORMAL,	LOW,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	STRONG,	LOW},
			{NONE,		NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW,	NORMAL},
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	NORMAL,	LOW,	NORMAL,	STRONG,	NORMAL,	NORMAL,	STRONG},
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	STRONG,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	STRONG,	LOW,	NORMAL,	NORMAL},
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	STRONG,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL},
			{NORMAL,	NORMAL,	LOW,	LOW,	STRONG,	STRONG,	LOW,	NORMAL,	LOW,	LOW,	STRONG,	LOW,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL},
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	NONE,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	LOW,	LOW,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL},
			{NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NONE,	NORMAL},
			{NORMAL,	NORMAL,	STRONG,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	LOW,	STRONG,	NORMAL,	NORMAL,	LOW,	STRONG,	NORMAL,	NORMAL},
			{NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NONE},
			{NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	NORMAL,	NORMAL,	LOW,	LOW},
			{NORMAL,	STRONG,	NORMAL,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	LOW,	LOW,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	NORMAL,	STRONG,	STRONG,	NORMAL}
		}
	};
	
	public static Type[][] GENERATION = new Type[6][];
	static{
		GENERATION[0] = new Type[]{Type.NORMAL, Type.FIGHTING, Type.FLYING, Type.POISON, Type.GROUND, Type.ROCK, Type.BUG, Type.GHOST, Type.FIRE, Type.WATER, Type.GRASS, Type.ELECTRIC, Type.PSYCHIC, Type.ICE, Type.DRAGON};
		GENERATION[1] = new Type[]{Type.NORMAL, Type.FIGHTING, Type.FLYING, Type.POISON, Type.GROUND, Type.ROCK, Type.BUG, Type.GHOST, Type.STEEL, Type.FIRE, Type.WATER, Type.GRASS, Type.ELECTRIC, Type.PSYCHIC, Type.ICE, Type.DRAGON, Type.DARK};
		GENERATION[2] = new Type[]{Type.NORMAL, Type.FIGHTING, Type.FLYING, Type.POISON, Type.GROUND, Type.ROCK, Type.BUG, Type.GHOST, Type.STEEL, Type.FIRE, Type.WATER, Type.GRASS, Type.ELECTRIC, Type.PSYCHIC, Type.ICE, Type.DRAGON, Type.DARK};
		GENERATION[3] = new Type[]{Type.NORMAL, Type.FIGHTING, Type.FLYING, Type.POISON, Type.GROUND, Type.ROCK, Type.BUG, Type.GHOST, Type.STEEL, Type.FIRE, Type.WATER, Type.GRASS, Type.ELECTRIC, Type.PSYCHIC, Type.ICE, Type.DRAGON, Type.DARK};
		GENERATION[4] = new Type[]{Type.NORMAL, Type.FIGHTING, Type.FLYING, Type.POISON, Type.GROUND, Type.ROCK, Type.BUG, Type.GHOST, Type.STEEL, Type.FIRE, Type.WATER, Type.GRASS, Type.ELECTRIC, Type.PSYCHIC, Type.ICE, Type.DRAGON, Type.DARK};
		GENERATION[5] = new Type[]{Type.NORMAL, Type.FIGHTING, Type.FLYING, Type.POISON, Type.GROUND, Type.ROCK, Type.BUG, Type.GHOST, Type.STEEL, Type.FIRE, Type.WATER, Type.GRASS, Type.ELECTRIC, Type.PSYCHIC, Type.ICE, Type.DRAGON, Type.DARK, Type.FAIRY};
	}
	
	public static float getDamageFactor(Type attacker, Type defender){
		List<Type> list = Arrays.asList(GENERATION[DataSource.getInstance().getGeneration() - 1]);
		return damageTable[DataSource.getInstance().getGeneration() - 1][list.indexOf(attacker)][list.indexOf(defender)];
	}
	
	public static List<DamageTypeAdapter.Entry> getFactorList(Type defender1, Type defender2){
		List<DamageTypeAdapter.Entry> objects = new ArrayList<DamageTypeAdapter.Entry>();
		Type[] types = DamageCalc.GENERATION[DataSource.getInstance().getGeneration() - 1];
		for (Type type : types) {
			
			float f1 = getDamageFactor(type, defender1);
			float f2 = defender2 == null ? 1f : getDamageFactor(type, defender2);
			objects.add(new DamageTypeAdapter.Entry(type, f1 * f2));
		}
		return objects;
	}
	
	public static int[] getFactorIds(float value){
		if(value >= 2f)
			return new int[]{R.string.factor_strong, R.color.factor_strong};
		if(value >= 1f)
			return new int[]{R.string.factor_normal, R.color.factor_normal};
		if(value > 0.1f)
			return new int[]{R.string.factor_low, R.color.factor_low};
		
		return new int[]{R.string.factor_none, R.color.factor_none};
	}
		
	public enum Type {
		NORMAL,
		FIGHTING,
		FLYING,
		POISON,
		GROUND,
		ROCK,
		BUG,
		GHOST,
		STEEL,
		FIRE,
		WATER,
		GRASS,
		ELECTRIC,
		PSYCHIC,
		ICE,
		DRAGON,
		DARK,
		FAIRY
	}	
}
